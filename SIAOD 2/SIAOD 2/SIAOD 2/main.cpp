#include <iostream>
using namespace std;

int func(int x, int y, int z = 3){
   int a = x + y + z;
    return a;
    
}
int main(){
    int x;
    int y;
    cin >> x;
    cin >>y;
    int a = func(x,y);
    cout << a;
    return 0;
}






















////#include <iostream>
////using namespace std;
////int main()
////{
////        int n = 1000000, t;
////        int A[n];
////        srand(time(NULL));
////        for(int i = 0; i < n; i ++){
////            A[i] = rand() % 10;
////            cout << A[i] << " ";
////        }
////        cout << endl <<"__________________________________________________"<<endl;
////        for(int i = 0; i < n - 1 ; i++)
////        {
////            for (int j = 0; j <n - i -1; j++)
////            {
////                if (A[j] > A[j + 1])
////                {
////                    t = A[j];
////                    A[j] = A[j + 1];
////                    A[j + 1] = t;
////                }
////            }
////        }
////        for(int i = 0; i < n; i++){
////            cout << A[i] << " ";
////        }
////    }
////
////
////    #include <iostream>
////    using namespace std;
////
////    int main()
////    {
////        int n = 100000, t;
////        int A[n];
////        srand(static_cast<unsigned int>(time(NULL))); // явное приведение типа
////        for(int i = 0; i < n; i ++){
////            A[i] = rand() % 10;
////            cout << A[i] << " ";
////        }
////        cout << endl <<"__________________________________________________"<<endl;
////        for(int i = 0; i < n - 1 ; i++)
////        {
////            for (int j = 0; j <n - i -1; j++)
////            {
////                if (A[j] > A[j + 1])
////                {
////                    t = A[j];
////                    A[j] = A[j + 1];
////                    A[j + 1] = t;
////                }
////            }
////        }
////        for(int i = 0; i < n; i++){
////            cout << A[i] << " ";
////        }
////    }
////
////
//
//#include <iostream>
//using namespace std;
//
//void f1(int a) {
//    a = a * 2;
//    cout << "Значение a внутри функции f1: " << a << endl;
//}
//
//void f2(int* a) {
//    *a = *a * 2;
//    cout << "Значение a внутри функции f2: " << *a << endl;
//}
//
//int main() {
//    int x = 5;
//    f1(x); // передача значения по значению
//    cout << "Значение x после вызова функции f1: " << x << endl;
//
//    x = 5;
//    f2(&x); // передача значения по указателю
//    cout << "Значение x после вызова функции f2: " << x << endl;
//
//    return 0;
//}
////Здесь функция f1() принимает целочисленный аргумент a по значению, а функция f2() принимает указатель на целочисленную переменную a. В функции f1() значение a умножается на 2 и сохраняется в локальной переменной, а значение оригинальной переменной x не изменяется. В функции f2() указатель a разыменовывается с помощью оператора *, чтобы получить доступ к оригинальной переменной x, значение которой затем умножается на 2. Это приводит к изменению значения переменной x, которая была передана по указателю в функцию f2().
////
////В функции main() дважды вызываются функции f1() и f2(), передавая переменную x в качестве аргумента. Первый вызов функции f1() изменяет значение локальной переменной, но не влияет на значение переменной x. Второй вызов функции f2() изменяет значение переменной x непосредственно с помощью передачи указателя на нее. Вывод в консоли показывает значения переменной x до и после вызова каждой функции.
//#include <iostream>
//using namespace std;
//int main ( ) {
//union {
//unsigned char bytes [ 3 ];
//int value;
//};
//int i;
//value = 64;
//for (i = 0; i <= 2; i++)
//    cout << (int ) bytes [i]<< " ";
//return 0;
//    }

