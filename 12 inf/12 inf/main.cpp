/*
#include <iostream>    // библиотека для ввода и вывода
#include <string> // библиотека для работы со строками
#include <ctime> // библиотека для работы со временем (нужна для rand())
#include <iomanip> // библиотека для округления
using namespace std; // отключение std

bool is_num(string n) { //функция на проверку числа
    for (int x = 0; x < n.size(); x++) {
        if (!isdigit(n[x]))
            return false;
    }
    return true;
}
int main()
{
    srand(time(0) ); // задаем временное начало отсчета (для rand())
    srand(time(0) ); // задаем временное начало отсчета (для rand())
    const int Rows = 6;    // кол-во строк
    const int Cols = 6;    // кол-во столбцов

    double arr[Rows][Cols]; // обьявление нашей матрицы

    cout << "\nВы хотите сами ввести числа в матрицу или заполнить её случайными числами?\n";
    cout << "Введите (1 или 2):\n  1. Заполнение матрицы с клавиатуры.\n  2. Заполнить матрицу случайными числами.\n";

    string answer; // объявление ввода
    cin >> answer; // ввод ответа
    bool IsAnswerInCorrect = true; // проверка на правильность введенных данных

    string in; // переменная отвечающая за ввод значений в матрицу

    while (IsAnswerInCorrect) { // будем вводить ответ до тех пор, пока не выберем верный
        if (answer == "1") { // вариант ввода с клавиатуры
            cout << "Введите элементы матрицы. Это должны быть числа от 0 до 100.\n";
            IsAnswerInCorrect = false; // вариант ввода нам подходит, после выполнения выходим из цикла
            for (int i = 0; i < Rows; i++) { // проход по строкам
                for (int j = 0; j < Cols; j++) { // проход по столбцам
                    cin >> in; // заполняем матрицу поэлементно
                    while (!is_num(in) || (in.length() > 2 && in != "100")) { // проверка коректного ввода
                        if ((!is_num(in) || (in.length() > 2 && in != "100"))) { // если ввод неправильный
                            cout << "Ошибка ввода. Необходимо ввести числа от 0 до 100.\n"; // выводим на экран ошибку
                        }
                        cin >> in; // пока ввод не станет правильным вводим значения с клавиатуры
                    }
                    arr[i][j] = stol(in); // если все хорошо, закидываем наше значение в матрицу
                }
            }
        }

        else if (answer == "2") { // вариант ввода рандомных чисел
            cout<<"\nМатрица заполняется случайными числами. ";
            IsAnswerInCorrect = false; // вариант ввода нам подходит, после выполнения выходим из цикла
            for (int i = 0; i < Rows; i++) { // проход по строкам
                for (int j = 0; j < Cols; j++) { // проход по столбцам
                    arr[i][j] = rand() % 100; // заполняем матрицу рандомными числами от 0 до 100
                }
            }
        }
        else{
            cout << "Нет такого варианта ответа. Попробуйте еще раз.\n";
            cin >> answer; // ввод ответа занова
        }
    }

    cout << "Получившаяся матрица 6x6:\n";
    for (int i = 0; i < Rows; i++) { // проход по строкам
        for (int j = 0; j < Cols; j++) { // проход по столбцам
            cout << arr[i][j] << " "; // выводим элементы матрицы 6х6
        }
        cout << "\n"; // переход на след. строку
    }
    cout << "\n"; // отступаем строчку (для красоты)
    double arr2[Rows/2][Cols]; // объявляем вторую матрицу 3х6

    for (int i = 0; i < Rows/2; i++) { // проход по строкам
        for (int j = 0; j < Cols; j++) { // проход по столбцам
            if (arr[i * 2][j] != 0) { // проверка деления на 0
                arr2[i][j] = arr[i * 2 + 1][j] / arr[i * 2][j]; // если все хорошо, делим элементы четных строк на элементы нечетных
            }
            else {
                arr2[i][j] = 101; // если всё плохо, заменяем наше выражение с делением на 0 на число вне диапазона
            }
        }
    }
    cout << "Делим четные строки, на нечетные (поэлементно).\nПолучившаяся матрица 3x6:\n";
    for (int i = 0; i < Rows / 2; i++) { // проход по строкам
        for (int j = 0; j < Cols; j++) { // проход по столбцам
            if (arr2[i][j] > 100) // проверка на запрещенное значение
                cout << "ошибка ";
            else {
                if ((int) arr2[i][j] / 10 > 0) {
                    cout << fixed << setprecision(3); // округляем вывод до 4 знаков после запятой
                    cout << arr2[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
                else {
                    cout << fixed << setprecision(4); // округляем вывод до 4 знаков после запятой
                    cout << arr2[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
            }
        }
        cout << "\n"; // переход на след. строку
    }

    double arr3[Rows / 2][Cols/2]; // объявление третьей матрицы

    for (int i = 0; i < Rows / 2; i++) { // проход по строкам
        for (int j = 0; j < Cols / 2; j++) { // проход по столбцам
            if (arr2[i][j*2] != 0 && arr2[i][j * 2] != 101 && arr2[i][j * 2 + 1] != 101) { // проверка на деление на 0 и на плохие числа
                arr3[i][j] = arr2[i][j*2+1] / arr2[i][j*2]; // если все хорошо, делим
            }
            else {
                arr3[i][j] = 101; // иначе кладем значения вне диапазона
            }
        }
    }

    cout << "\nДелим четные столбцы, на нечетные (поэлементно).\nПолучившаяся матрица 3x3:\n";
    for (int i = 0; i < Rows / 2; i++) { // проход по строкам
        for (int j = 0; j < Cols / 2; j++) { // проход по столбцам
            if (arr3[i][j] > 100) // проверка на запрещенное
                cout << "err "; // ошибка прри делении на ноль
            else {
                if ((int)arr3[i][j] / 10 > 0) {
                    cout << fixed << setprecision(3); // округляем вывод до 4 знаков после запятой
                    cout << arr3[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
                else {
                    cout << fixed << setprecision(4); // округляем вывод до 4 знаков после запятой
                    cout << arr3[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
            }
        }
        cout << "\n"; // переход на новую строчку
    }

    cout << "\n"; // отступ строки (для красоты)
    double arr4[Rows / 2][Cols / 2]; // объявляем четвертую матрицу
    double a, b, c; // для простоты будем работать с этими переменными

    for (int i = 0; i < Cols / 2; i++) { // проход сразу по столбцам
        a = arr3[0][i]; // вводим переменные a, b, c
        b = arr3[1][i];
        c = arr3[2][i];
        if (a > b) // алгоритм сортировки элементов столбцов
            if (b > c) {
                arr4[0][i] = c;
                arr4[1][i] = b;
                arr4[2][i] = a;
            }
            else
            if (a > c) {
                arr4[0][i] = b;
                arr4[1][i] = c;
                arr4[2][i] = a;
            }
            else {
                arr4[0][i] = b;
                arr4[1][i] = a;
                arr4[2][i] = c;
            }
        else
        if (a > c) {
            arr4[0][i] = c;
            arr4[1][i] = a;
            arr4[2][i] = b;
        }
        else
        if (b > c) {
            arr4[0][i] = a;
            arr4[1][i] = c;
            arr4[2][i] = b;
        }
        else {
            arr4[0][i] = a;
            arr4[1][i] = b;
            arr4[2][i] = c;
        }
    }
    cout << "Сортируем каждый столбик матрицы по возрастанию.\nОтсортированная матрица 3x3:\n";
    for (int i = 0; i < Rows / 2; i++) { // проход по строкам
        for (int j = 0; j < Cols / 2; j++) { // проход по столбцам
            if (arr4[i][j] > 100) // проверка на запрещенное
                cout << "err "; // ошибка при делении на ноль
            else {
                if ((int) arr4[i][j] / 10 > 0) {
                    cout << fixed << setprecision(3); // округляем вывод до 4 знаков после запятой
                    cout << arr4[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
                else {
                    cout << fixed << setprecision(4); // округляем вывод до 4 знаков после запятой
                    cout << arr4[i][j] << " "; // выводим получившуюся матрицу окрушленную до 4 знаков после запятой
                }
            }
        }
        cout << "\n"; // переход на новую строку
    }
    cout<< "\nЭлементы матрицы, которые получаются делением числа на 0 подписываются, как ошибка. \nПри сортировке считаются, как бесконечность";
}
*/

